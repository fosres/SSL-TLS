--- http.c	2019-03-01 02:25:46.462522700 -0600
+++ myhttp.c	2019-03-01 02:25:32.755527200 -0600
@@ -1,463 +1,178 @@
-#if 0
-    Copyright 2018-INFINITY Tanveer Salim
-    
-    Adapated from Joshua Davies's original
-
-    http.c file
-
-    GNU GPL v2.0 License
-
-#endif
-
-#if 0
-    This proram performs a simple
-
-    non-encrypted HyperText Transfer
-
-    Protocol Connection
-#endif
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <errno.h>
-#include <string.h>
-#include <sys/types.h>
-#include <netdb.h>
-#include <sys/socket.h>
-#include <netinet/in.h>
-#include <unistd.h>
-#include "http.h"
-
-
-#define HTTP_PORT 80
-
-#define EXIT_SUCCESS 0
-
-#define EXIT_FAILURE 1
-
-#if 0
-    The following will parse the URL to arrive
-    at the proper file within the website
-    directory.
-
-    The function will return 0 if parsing
-    successful; -1 if it fails.
-
-    parse_url looks for all "//" and '/'
-    and replaces them with null-terminators
-    so the compiler can accept the host
-    and path as individual strings.
-
-    host is the string starting IMMEDIATELY
-    AFTER the "//" in the URL and the first
-    '/' in the URL after the "//".
-
-    path is everything after the host
-#endif
-
-
-
-int parse_url(char * uri, char ** host, char ** path)
-{
-    char * pos = NULL;
-
-    if ( (pos = strstr(uri,"//")) == NULL )
-    {
-        return -1;
-
-    }
-#if 0
- assigns char immediately after "//" in URL
-#endif
-    
-    *host = pos + 2;
-
-    if ( (pos = strchr(*host,'/') ) == NULL)
-    {
-        *path = NULL;
-
-    }
-
-    else
-    {
-        *pos = '\0';
-
-        *path = pos + 1;
-
-    }
-
-    return 0;
-
-}
-
-#define MAX_GET_COMMAND 255
-
-#if 0
-    Format and send an HTTP get command.
-
-    The return value will be on success, -1 
-    on failure, with errno set appropriately.
-    The caller must then retrieve the
-
-    response.
-
-#endif
-
-int http_get(int connection, 
-            const char * path, 
-            const char * host,
-            const char * proxy_host,
-            const char * proxy_user,
-            const char * proxy_password)
-{
-    static char get_command[MAX_GET_COMMAND];
-    
-    if ( proxy_host != NULL )
-    {
-        sprintf(get_command, "GET http://%s/%s HTTP/1.1\r\n", host, path );
-    
-    }
-
-    else
-    {
-        sprintf(get_command, "GET /%s HTTP/1.1\r\n\0", path);
-    }
-    
-
-    if ( send(connection, get_command, strlen(get_command)+1, 0) == -1)
-    {
-	    fprintf(stderr,"%d: ",__LINE__);
-
-	    perror("send()");
-
-	    exit(EXIT_FAILURE); 
-    }
-    
-    sprintf(get_command, "Host: %s\r\n\0", host);
-    
-    if ( send(connection,get_command, strlen(get_command), 0)  == -1 ) 
-    {
-
-	    fprintf(stderr,"%d: ",__LINE__);
-
-	    perror("send()");
-
-	    exit(EXIT_FAILURE); 
-    }
-    
-    if ( proxy_user != NULL) 
-    {
-        int credentials_len = strlen(proxy_user) + strlen(proxy_password) + 1;
-        
-	char * proxy_credentials = (char *)malloc(credentials_len);
-
-        char * auth_string = (char *)malloc( ( (credentials_len * 4) / 3 ) + 1 );
-        
-	sprintf(proxy_credentials, "%s:%s",proxy_user, proxy_password);
-        
-        base64_encode(proxy_credentials, credentials_len, auth_string);
-        
-        sprintf(get_command, "Proxy-Authorization: BASIC %s\r\n\0",auth_string);
-        
-        if ( send(connection,get_command,strlen(get_command),0) == -1 )
-    {
-        free(proxy_credentials);
-
-        free(auth_string);
-
-	exit(EXIT_FAILURE); 
-
-    }
-
-    free(proxy_credentials);
-
-    free(auth_string);
-    
-    
-    }
-    
-    sprintf(get_command, "Connection: close\r\n\r\n");
-    
-    if ( send(connection, get_command, strlen(get_command), 0) == -1 )
-    {
-        return -1;
-    }
-    
-    return 0;
-
-}
-
-#define BUFFER_SIZE 255
-
-void display_result(int connection)
-{
-    int received = 0;
-
-    static char recv_buf[BUFFER_SIZE + 1];
-
-    while ( (received = recv(connection, recv_buf, BUFFER_SIZE, 0) ) > 0 )
-    {
-        recv_buf[received] = '\0';
-
-        printf("%s",recv_buf);
-        
-    }
-    printf("\n");
-
-}
-
-int parse_proxy_param(char * proxy_spec, char ** proxy_host, int * proxy_port, char ** proxy_user, char **
-proxy_password)
-{
-    char * login_sep = NULL, * colon_sep = NULL, * trailer_sep = NULL, * username = NULL,
-	 
-    * password = NULL, * host = NULL, * port = NULL;
-    
-    #if 0
-        
-    	The user should start the proxy spec with "http". 
-		
-	But, we are being nice if he or she did not.
-
-    #endif
-
-    if ( strncmp("http://",proxy_spec,7) == 0)
-    {
-        proxy_spec += 7;
-    }
-
-//login_sep will later place a NUL byte at end of password string	
-    
-	
-    username = proxy_spec; 
-	
-    host = (login_sep = strchr(proxy_spec,'@'))+1;
-
-    if (login_sep != NULL)
-    {
-	    
-//colon_sep will later place a NUL byte at end of username string 
-	
-	password = (colon_sep = strchr(proxy_spec, ':'))+1;
-
-        if ((colon_sep == NULL) || (colon_sep > login_sep ) )
-        {
-            //Error - if username supplied, password must be supplied
-            fprintf(stderr,"%d: Expected password in '%s'\n",__LINE__,proxy_spec);
-            
-            return 0;
-            
-        }
-
-        
-	*colon_sep = '\0';
-
-        *proxy_user = username;
-
-        *login_sep = '\0';
-
-        *proxy_password = password;
-
-//proxy_spec below will now point to beginning of proxy-host string
-
-        proxy_spec = host;
-    }
-
-#if 0
-    If the user added a "/" at the end of proxy host, just ignore it.
-#endif
-
-	   trailer_sep = strchr(proxy_spec,'/'); 
-    
-    
-    if ( trailer_sep != NULL )
-    {
-        *trailer_sep = '\0';
-    }
-
-//port will later put a NUL byte at end of proxy-port string
-    
-    port = (colon_sep = strchr(proxy_spec, ':')) + 1;
-
-    if ( colon_sep != NULL )
-    {
-        // non-standard proxy part
-
-//colon_sep now puts NUL byte at end of proxy-host
-    
-        *colon_sep = '\0';
-
-//the char * pointed to by proxy_host will now store
-
-//the memory address of the beginning char in
-
-//proxy_host
-        
-	*proxy_host = host;
-
-        *proxy_port = (int)strtol(port,NULL,10);
-
-        if ( *proxy_port == 0)
-        {
-            // 0 is not a valid port; this is an error, whether it was mistyped or specified as 0.
-            return 0; 
-        }
-
-        else
-        {
-            *proxy_port = HTTP_PORT;
-
-            *proxy_host = host;
-        }
-
-        return 1;
-
-    }
-
-}
-
-
-#if 0
-
-Simple command line HTTP client.
-
-gethostbyname and gethostbyaddr are both OUTDATED, especially
-
-gethostbyname. 
-
-We are better off merely using getaddrinfo() instead.
-
-This also means the struct hostent is OUTDATED, please
-
-delete them and use struct addrinfo to be able to use
-
-getaddrinfo().
-
-#endif
-
-int main(int argc, char * argv[])
-{
-    int client_connection = 0;
-    
-    char * proxy_host = NULL, * proxy_user = NULL, * proxy_password = NULL;
-    
-    int proxy_port = 0;
-
-    char * host = NULL, * path = NULL;
-
-    struct hostent * host_name = NULL;
-
-    static struct sockaddr_in host_address;
-    
-    int ind = 0;
-    
-    if ( argc < 2 )
-    {
-        fprintf(stderr, "Usage: %s [-p http://[username:password@]proxy-host:proxy-port]\\ <URL>\n", argv[0]);
-        
-        return 1;
-    }    
-        proxy_host = proxy_user = proxy_password = host = path = NULL;
-
-        ind = 1;
-
-        if ( strcmp("-p",argv[ind] ) == 0)
-        {
-            if ( parse_proxy_param(argv[++ind], &proxy_host, &proxy_port, &proxy_user, &proxy_password ) == 0 )
-            {
-                fprintf(stderr, "Error - malformed proxy parameter '%s'.\n", argv[2] );
-                return 2;
-            }
-
-            ind++;
-
-        }
-
-    if ( parse_url(argv[ind], &host, &path) == -1 )
-    {
-        fprintf(stderr, "Error - malformed URL '%s'\n", argv[1]);
-
-        return 1;
-    
-    }
-
-    printf("Connecting to host '%s'\n", host);
-
-#if 0
-Step 1: After the URL has been parsed and 
-
-the host is established, you must make a
-
-socket to it. The domain host name (e.g.
-
-www.server.com is converted to a 32-bit
-
-IPv4 decimal number. Such as 100.218.64.2
-
-You need to call the "gethostname" library
-
-function to do this, and connect to the
-
-server.
-
-#endif
-
-
-    client_connection = socket(AF_INET, SOCK_STREAM, 0);
-
-    if ( client_connection == -1 )
-    {
-        perror( "Unable to create local socket");
-        return 2;
-    }
-
-    host_name = gethostbyname(host);
-
-    if ( host_name == NULL )
-    {
-        perror("Error in name resolution");
-
-        return 3;
-    }
-
-    if ( proxy_host != NULL )
-    {
-        printf("Connecting to host '%s'\n", proxy_host);
-        host_name = gethostbyname(proxy_host);
-    }
-    
-    else
-    {
-        printf("Connecting to host '%s'\n", host);
-        host_name = gethostbyname(host);
-    }
-
-//Give socket a name
-    host_address.sin_family = AF_INET;
-
-    host_address.sin_port = htons(HTTP_PORT);
-    
-    memcpy(&host_address.sin_addr, host_name->h_addr_list[0], sizeof(struct in_addr));
-    if ( connect(client_connection, (struct sockaddr * ) & host_address, sizeof(host_address) ) == -1)
-    {
-       	fprintf(stderr,"%d: ",__LINE__);
-
-	perror("Unable to connect to host");
-
-        return 4;
-
-    }
-
-    printf("Retrieving document: '%s'\n", path);
-
-    http_get(client_connection, path, host, proxy_host, proxy_user, proxy_password);
-    
-    display_result(client_connection);
-
-    printf("Shutting down.\n");
-
-    close(client_connection);    
-    
-    return 0;
-
-}
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netdb.h>
+#include <unistd.h>
+#include <arpa/inet.h>
+#include <netinet/in.h>
+
+
+#define MAX_BUFFER_SIZE 1024
+
+#define GET_REQUEST_LEN 32
+
+#define TEST_LEN ( ( (MAX_BUFFER_SIZE)*(2) )+ (GET_REQUEST_LEN) )
+
+void get_params(char const * uri,char ** hostname,char ** pathname)
+{
+	static char host[MAX_BUFFER_SIZE];
+
+	static char url[MAX_BUFFER_SIZE];
+
+	static char * path_slash = NULL;
+
+	strncat(url,uri,MAX_BUFFER_SIZE-strlen(url)-1);
+
+
+	if ( strstr(url,"//") != NULL )
+	{ 
+		strncat(*hostname,&url[abs(strstr(url,"//")-&url[0]) + 2],MAX_BUFFER_SIZE - strlen(*hostname)-1);
+
+
+		
+	}
+
+	else
+	{
+		strncat(*hostname,&url[0],MAX_BUFFER_SIZE-strlen(*hostname)-1);
+
+		
+	}
+	
+
+	if (strstr(*hostname,"/") != NULL)	
+	{	
+		
+		strncat(*pathname,&url[abs( strstr(*hostname,"/")  - &url[0] ) + 1],MAX_BUFFER_SIZE-strlen(*pathname)-1);
+	}
+
+	else
+	{
+		*pathname[0] = '\0';	
+			
+	}
+
+// separating hostname from pathname
+	
+	if ( strstr(*hostname,"/") != NULL )
+	{
+		*strstr(*hostname,"/") = '\0';
+	}
+
+}
+
+int main(int argc, char ** argv)
+{
+	if ( argc < 2)
+	{
+		fprintf(stderr,"%d: Missing URL",__LINE__);
+
+		exit(EXIT_FAILURE);
+	}	
+	
+	static struct addrinfo hints, *res = NULL, *p = NULL; 
+
+	int sockd = 0;
+
+	static char msg[MAX_BUFFER_SIZE];
+
+	static char test[1024*2+32];
+
+	static char host[MAX_BUFFER_SIZE];
+
+	static char * host_p = &host[0];
+
+	static char path[MAX_BUFFER_SIZE];
+
+	static char * path_p = &path[0];
+
+	get_params(argv[1],&host_p,&path_p);
+
+	printf("Host:%s\nPath:%s\n",host,path);
+
+	snprintf(test,TEST_LEN,"GET /%s HTTP/1.1\r\n\0",path);
+
+	int recv_bytes = 0, sent_bytes = 0, gstrerror = 0;
+
+	memset(&hints,0,sizeof(hints));
+
+	hints.ai_family = AF_UNSPEC;
+
+	hints.ai_socktype = SOCK_STREAM;
+	
+	if ( (gstrerror = getaddrinfo(host,"http",&hints,&res) ) != 0)
+	{
+		fprintf(stderr,"%d: getaddrinfo(): %s\n",__LINE__,gai_strerror(gstrerror));
+		exit(EXIT_FAILURE);
+
+	}
+
+	for ( p = res; p!= NULL; p = p->ai_next)
+	{
+		if ( (p->ai_family == AF_INET) && ((sockd = socket(p->ai_family,p->ai_socktype,p->ai_protocol)) != -1) )
+		{
+			if (connect(sockd,(struct sockaddr *)p->ai_addr,p->ai_addrlen) != -1)
+			{ res = p; break; }	
+			
+		}
+
+	}
+	
+	if ( p == NULL)
+	{
+		fprintf(stderr,"%d: ",__LINE__);
+		perror("socket()");
+		exit(EXIT_FAILURE);
+	}
+
+	printf("Data Sent and Received\n");
+	
+	if ( (sent_bytes = send(sockd,test,strlen(test),0)) == -1)
+	{
+		fprintf(stderr,"%d: ",__LINE__);
+
+		perror("send");
+		
+		exit(EXIT_FAILURE);
+	}
+	
+	snprintf(test,TEST_LEN,"Host: %s\r\n\0",host);
+
+	if ( (sent_bytes = send(sockd,test,strlen(test),0)) == -1)
+	{
+		fprintf(stderr,"%d: ",__LINE__);
+
+		perror("send");
+		
+		exit(EXIT_FAILURE);
+	}
+	
+	snprintf(test,TEST_LEN,"Connection: close\r\n\r\n\0");
+
+	if ( (sent_bytes = send(sockd,test,strlen(test),0)) == -1)
+	{
+		fprintf(stderr,"%d: ",__LINE__);
+
+		perror("send");
+		
+		exit(EXIT_FAILURE);
+	}
+	printf("%s",recv_bytes,msg);
+
+	while ( ( ( recv_bytes = recv(sockd,msg,sizeof(msg),0) )  > 0 ) 
+		&& (msg[0] != '\0') )
+	{
+		printf("%s",msg);
+		
+		memset(msg,0,sizeof(msg));	
+	}
+
+
+	close(sockd);
+		
+	freeaddrinfo(res);
+	
+	return 0;
+}
